#include <stdio.h>
#include <stdlib.h>
// Define a structure for a stack node
struct Node
{
 int data;
 struct Node *next;
};
// Function to create a new node
struct Node *createNode(int data)
{
 struct Node *newNode = (struct Node *)malloc(sizeof(struct 
Node));
 if (newNode == NULL)
 {
 printf("Memory allocation failed\n");
 exit(EXIT_FAILURE);
 }
 newNode->data = data;
 newNode->next = NULL;
 return newNode;
}
// Function to check if the stack is empty
int isEmpty(struct Node *root)
{
 return (root == NULL);
}
// Function to push a new element onto the stack
void push(struct Node **root, int data)
{
 struct Node *newNode = createNode(data);
 newNode->next = *root;
 *root = newNode;
 printf("%d pushed to stack\n", data);
}
// Function to pop an element from the stack
int pop(struct Node **root)
{
 if (isEmpty(*root))
 {
 printf("Stack is empty\n");
 exit(EXIT_FAILURE);
 }
 struct Node *temp = *root;
 *root = (*root)->next;
 int popped = temp->data;
 free(temp);
 return popped;
}
// Function to peek at the top element of the stack
int peek(struct Node *root)
{
 if (isEmpty(root))
 {
 printf("Stack is empty\n");
 exit(EXIT_FAILURE);
 }
 return root->data;
}
// Example usage of the stack
int main()
{
 struct Node *root = NULL;
 push(&root, 10);
 push(&root, 20);
 push(&root, 30);
 printf("Top element is %d\n", peek(root));
 printf("%d popped from stack\n", pop(&root));
 printf("%d popped from stack\n", pop(&root));
 printf("Top element is %d\n", peek(root));
 return 0;
}
